# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow lets you generate SLSA provenance file for your project.
# The generation satisfies level 3 for the provenance requirements - see https://slsa.dev/spec/v0.1/requirements
# The project is an initiative of the OpenSSF (openssf.org) and is developed at
# https://github.com/slsa-framework/slsa-github-generator.
# The provenance file can be verified using https://github.com/slsa-framework/slsa-verifier.
# For more information about SLSA and how it improves the supply-chain, visit slsa.dev.

name: Reusable with matrix
on:
  workflow_dispatch:
  release:
    types: [created]

permissions: read-all

jobs:
  build:
    outputs:
      digests-linux: ${{ steps.hash-linux.outputs.digests }}
      digests-macos: ${{ steps.hash-macos.outputs.digests }}
      digests-windows: ${{ steps.hash-windows.outputs.digests }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-11, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v3

      # ========================================================
      #
      # Step 1: Build your artifacts.
      #
      # ========================================================
      - name: Build artifacts for ${{ matrix.os }}
        run: |
            # These are some amazing artifacts.
            echo "artifact1 ${{ matrix.os }}" > artifact1-${{ matrix.os }}
            echo "artifact2 ${{ matrix.os }}" > artifact2-${{ matrix.os }}
            echo "artifact3 ${{ matrix.os }}" > artifact3-${{ matrix.os }}

      # ========================================================
      #
      # Step 2: Add a step to generate the provenance subjects
      #         as shown below. Update the sha256 sum arguments
      #         to include all binaries that you generate
      #         provenance for.
      #
      # ========================================================
      - name: Generate SLSA subjects - ${{ runner.os }}
        id: hash-linux
        if: runner.os == 'Linux'
        run: |
          set -euo pipefail

          # List the artifacts the provenance will refer to.
          files=$(ls artifact*)
          # Generate the subjects (base64 encoded).
          echo "::set-output name=digests::$(sha256sum $files | base64 -w0)"
      - name: Generate SLSA subjects - ${{ runner.os }}
        id: hash-macos
        if: runner.os == 'macOS'
        run: |
          set -euo pipefail

          # List the artifacts the provenance will refer to.
          files=$(ls artifact*)
          # Generate the subjects (base64 encoded).
          shasum -a 256 $files
          echo "::set-output name=digests::$(shasum -a 256 $files | base64)"
          
      - name: Generate SLSA subjects - ${{ runner.os }}
        id: hash-windows
        if: runner.os == 'Windows'
        # Set-Variable -Name "desc" -Value "A description"
        # files=(dir  | % { $_.basename }) -join ','
        run: |
          # List the artifacts the provenance will refer to.
          
          # Generate the subjects (base64 encoded).
          $hashes = Get-FileHash -Algorithm SHA256 * | ForEach-Object {Write-Output "$($_.Hash) $($_.Path)"}
          $base64 = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($hashes))
          echo "::set-output name=digests::$base64"

  merge:
    needs: [build]
    outputs:
      digests: ${{ steps.hash.outputs.digests }}
    runs-on: ubuntu-latest
    steps:
      - name: merge results
        id: hash
        env:
          LINUX_DIGESTS: "${{ needs.build.outputs.digests-linux }}"
          MACOS_DIGESTS: "${{ needs.build.outputs.digests-macos }}"
          WINDOWS_DIGESTS: "${{ needs.build.outputs.digests-windows }}"
        run: |
          set -euo pipefail

          linux_digests=$(echo "$LINUX_DIGESTS" | base64 -d)
          macos_digests=$(echo "$MACOS_DIGESTS" | base64 -d)
          windows_digests=$(echo "$WINDOWS_DIGESTS" | base64 -d)
          echo "LINUX:"
          echo "$linux_digests" 
          echo "MACOS:"
          echo "$macos_digests"
          echo "WINDOWS:"
          echo "$windows_digests"
          echo "$linux_digests" > checksums.txt
          echo "$macos_digests" >> checksums.txt
          echo "$windows_digests" >> checksums.txt
          echo "CHECKSUM:"
          cat checksums.txt
          echo "::set-output name=digests::$(cat checksums.txt | base64 -w0)"
      
  provenance:
    needs: [build, merge]
    permissions:
      actions: read   # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.0
    with:
      base64-subjects: "${{ needs.merge.outputs.digests }}"
      upload-assets: true # Optional: Upload to a new release
